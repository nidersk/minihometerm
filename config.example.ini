[logging]
# level → Logging verbosity for the application.
#   Available values: DEBUG, INFO, WARNING, ERROR, CRITICAL
level = DEBUG


[connection]
# ws_url → Home Assistant WebSocket API URL
#   Format: ws://<host>:<port>/api/websocket  (use wss:// for SSL)
ws_url = ws://homeassistant.local:8123/api/websocket

# token → Long-lived access token from Home Assistant user profile
#   Example: "eyJhbGciOi..."
token = <YOUR_LONG_LIVED_TOKEN>


[ui]
# theme → UI theme style
#   Values: light, dark
theme = dark

# fullscreen → Run application in fullscreen mode
#   Values: 1 (enabled), 0 (disabled)
fullscreen = 1

# screen_dim_timeout → Time in seconds before screen dims
screen_dim_timeout = 60         # seconds

# screen_off_timeout → Time in seconds before screen turns off completely
screen_off_timeout = 200        # seconds

# show_date → Display current date on UI
#   Values: 1 (yes), 0 (no)
show_date = 1

# show_clock → Display current time on UI
#   Values: 1 (yes), 0 (no)
show_clock = 1

# show_temperature → Display temperature widget
#   Values: 1 (yes), 0 (no)
show_temperature = 1

# show_temperature_min_max → Show min/max temperature along with current
#   Values: 1 (yes), 0 (no)
show_temperature_min_max = 1

# enable_animations → Enable UI animations
#   Values: 1 (yes), 0 (no)
enable_animations = 1


[conditions]
# temperature_sensor → Entity ID of the temperature sensor in Home Assistant
temperature_sensor = sensor.smart_outdoor_module_temperature

# temperature_min_entity → Entity providing minimum temperature value (e.g. input_number)
temperature_min_entity = input_number.min_temp

# temperature_max_entity → Entity providing maximum temperature value (e.g. input_number)
temperature_max_entity = input_number.max_temp


[buttons]
# button_action_timeout → Debounce / hold timeout between button presses
#   Unit: milliseconds
button_action_timeout = 300  # milliseconds

# Button 1 configuration
#   - label → Text shown on button
#   - icon → Icon name (supported by UI icon set: lightbulb, garage, lock, fan, power, etc.)
#   - state_entity → HA entity reflecting button state (usually input_boolean.*)
#   - action → HA service/entity to call when pressed (e.g. script.*, light.*, switch.*)
button1_label = Button 1
button1_icon = lightbulb
button1_state_entity = input_boolean.test_toggle_1
button1_action = script.toggle_gate

# Button 2 configuration
button2_label = Button 2
button2_icon = garage
button2_state_entity = input_boolean.test_toggle_2
button2_action = script.toggle_garage_gate
